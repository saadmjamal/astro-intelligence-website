{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer2/source-files';\nimport rehypePrettyCode from 'rehype-pretty-code';\nimport remarkGfm from 'remark-gfm';\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `blog/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    author: { type: 'string', required: true },\n    excerpt: { type: 'string', required: true },\n    tags: { type: 'list', of: { type: 'string' }, required: true },\n    image: { type: 'string' },\n  },\n  computedFields: {\n    url: { \n      type: 'string', \n      resolve: (post) => `/blog/${post._raw.flattenedPath.replace('blog/', '')}` \n    },\n    slug: {\n      type: 'string',\n      resolve: (post) => post._raw.flattenedPath.replace('blog/', '')\n    }\n  },\n}));\n\nexport const CaseStudy = defineDocumentType(() => ({\n  name: 'CaseStudy',\n  filePathPattern: `case-studies/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    client: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    industry: { type: 'string', required: true },\n    services: { type: 'list', of: { type: 'string' }, required: true },\n    metrics: { type: 'json', required: true }, // For success metrics\n    excerpt: { type: 'string', required: true },\n    image: { type: 'string' },\n  },\n  computedFields: {\n    url: { \n      type: 'string', \n      resolve: (study) => `/portfolio/${study._raw.flattenedPath.replace('case-studies/', '')}` \n    },\n    slug: {\n      type: 'string',\n      resolve: (study) => study._raw.flattenedPath.replace('case-studies/', '')\n    }\n  },\n}));\n\nexport const ResearchArticle = defineDocumentType(() => ({\n  name: 'ResearchArticle',\n  filePathPattern: `research/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    authors: { type: 'list', of: { type: 'string' }, required: true },\n    abstract: { type: 'string', required: true },\n    category: { type: 'string', required: true },\n    tags: { type: 'list', of: { type: 'string' }, required: true },\n  },\n  computedFields: {\n    url: { \n      type: 'string', \n      resolve: (article) => `/research-lab/${article._raw.flattenedPath.replace('research/', '')}` \n    },\n    slug: {\n      type: 'string',\n      resolve: (article) => article._raw.flattenedPath.replace('research/', '')\n    }\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Post, CaseStudy, ResearchArticle],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      [\n        rehypePrettyCode,\n        {\n          theme: 'github-dark',\n          onVisitLine(node: any) {\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\n            // lines to be copy/pasted\n            if (node.children.length === 0) {\n              node.children = [{ type: 'text', value: ' ' }];\n            }\n          },\n          onVisitHighlightedLine(node: any) {\n            node.properties.className.push('line--highlighted');\n          },\n          onVisitHighlightedWord(node: any) {\n            node.properties.className = ['word--highlighted'];\n          },\n        },\n      ],\n    ],\n  },\n});"],
  "mappings": "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",
  "names": []
}
